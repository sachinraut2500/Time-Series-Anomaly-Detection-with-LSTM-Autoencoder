# -*- coding: utf-8 -*-
"""Time Series Anomaly Detection with LSTM Autoencoder.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pKYgrwW1BbCxeOcU-7lO2w31ebT7-_yO
"""

---

## Project 3: Time Series Anomaly Detection with LSTM Autoencoder

---

### `timeseries_anomaly_lstm.py`

```python
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import LSTM, RepeatVector, TimeDistributed, Dense
from sklearn.preprocessing import MinMaxScaler

def create_sine_data(timesteps=1000):
    t = np.linspace(0, 50, timesteps)
    data = np.sin(t) + 0.1 * np.random.normal(size=timesteps)
    return data.reshape(-1,1)

def create_sequences(data, seq_length=50):
    xs, ys = [], []
    for i in range(len(data)-seq_length):
        xs.append(data[i:i+seq_length])
        ys.append(data[i+seq_length])
    return np.array(xs), np.array(ys)

def build_model(seq_length, features):
    inputs = tf.keras.Input(shape=(seq_length, features))
    encoded = LSTM(64, activation='relu', return_sequences=False)(inputs)
    decoded = RepeatVector(seq_length)(encoded)
    decoded = LSTM(64, activation='relu', return_sequences=True)(decoded)
    decoded = TimeDistributed(Dense(features))(decoded)
    model = Model(inputs, decoded)
    model.compile(optimizer='adam', loss='mse')
    return model

def main():
    data = create_sine_data()
    scaler = MinMaxScaler()
    data_scaled = scaler.fit_transform(data)

    seq_length = 50
    X, y = create_sequences(data_scaled, seq_length)
    X_train, X_test = X[:800], X[800:]
    y_train, y_test = y[:800], y[800:]

    model = build_model(seq_length, 1)
    model.fit(X_train, X_train, epochs=30, batch_size=32, validation_split=0.1, verbose=0)

    X_test_pred = model.predict(X_test)
    test_mae_loss = np.mean(np.abs(X_test_pred - X_test), axis=(1,2))

    threshold = np.max(test_mae_loss)

    plt.plot(test_mae_loss)
    plt.axhline(threshold, color='r')
    plt.title('Test MAE Loss with Threshold')
    plt.show()

    print(f"Anomaly threshold: {threshold}")

if __name__ == "__main__":
    main()